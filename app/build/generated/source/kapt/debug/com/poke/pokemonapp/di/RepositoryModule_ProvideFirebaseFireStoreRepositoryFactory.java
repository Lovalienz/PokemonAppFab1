// Generated by Dagger (https://dagger.dev).
package com.poke.pokemonapp.di;

import com.poke.pokemonapp.data.dataSource.local.PokemonLocalDataSource;
import com.poke.pokemonapp.data.dataSource.remote.FirebaseRemoteDataSource;
import com.poke.pokemonapp.domain.repositories.FirebaseRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class RepositoryModule_ProvideFirebaseFireStoreRepositoryFactory implements Factory<FirebaseRepository> {
  private final Provider<FirebaseRemoteDataSource> remoteDataSourceProvider;

  private final Provider<PokemonLocalDataSource> localDataSourceProvider;

  public RepositoryModule_ProvideFirebaseFireStoreRepositoryFactory(
      Provider<FirebaseRemoteDataSource> remoteDataSourceProvider,
      Provider<PokemonLocalDataSource> localDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public FirebaseRepository get() {
    return provideFirebaseFireStoreRepository(remoteDataSourceProvider.get(), localDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideFirebaseFireStoreRepositoryFactory create(
      Provider<FirebaseRemoteDataSource> remoteDataSourceProvider,
      Provider<PokemonLocalDataSource> localDataSourceProvider) {
    return new RepositoryModule_ProvideFirebaseFireStoreRepositoryFactory(remoteDataSourceProvider, localDataSourceProvider);
  }

  public static FirebaseRepository provideFirebaseFireStoreRepository(
      FirebaseRemoteDataSource remoteDataSource, PokemonLocalDataSource localDataSource) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideFirebaseFireStoreRepository(remoteDataSource, localDataSource));
  }
}
